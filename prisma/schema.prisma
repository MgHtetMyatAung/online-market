// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ==============================
// 1. Enums
// ==============================
enum UserRole {
  GUEST
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PromotionType {
  PERCENTAGE_DISCOUNT
  FIXED_AMOUNT_DISCOUNT
  CASHBACK
  BUY_X_GET_Y
  FREE_SHIPPING
}

enum AddressType {
  SHIPPING
  BILLING
}

enum UserLevelType {
  BRONZE
  SILVER
  GOLD
  Diamond
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// ==============================
// 2. Customer & Address Management
// ==============================
// The User model has been renamed to Customer for clarity.
// It serves as the main entity for customer authentication and data.
model Customer {
  id            String        @id @default(uuid())
  email         String        @unique
  name          String
  phone         String?
  password      String
  role          UserRole      @default(USER)
  isActive      Boolean       @default(true)
  loyaltyPoints Int           @default(0)
  level         UserLevelType @default(BRONZE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  orders       Order[]
  addresses    Address[]
  carts        Cart[]
  userRequests UserRequest[]
  blogPosts    Blog[]
}

model Address {
  id         String      @id @default(uuid())
  customerId String
  customer   Customer    @relation(fields: [customerId], references: [id])
  street     String
  city       String
  state      String?
  zip        String
  country    String
  type       AddressType
  isDefault  Boolean     @default(false)

  shippingOrders Order[]  @relation("ShippingAddress")
  billingOrders  Order[]  @relation("BillingAddress")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model UserRequest {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])
  subject    String
  message    String
  status     String   @default("OPEN")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// ==============================
// 3. Product & Catalog Management
// ==============================
model Attribute {
  id     String           @id @default(uuid())
  name   String           @unique
  values AttributeValue[]
}

model AttributeValue {
  id                String                  @id @default(uuid())
  value             String
  attributeId       String
  attribute         Attribute               @relation(fields: [attributeId], references: [id])
  variantAttributes VariantAttributeValue[]

  @@unique([attributeId, value])
}

model Category {
  id          String     @id @default(uuid())
  name        String
  description String?
  image       String?
  slug        String     @unique
  isActive    Boolean    @default(true)
  parentId    String?
  parent      Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: Cascade)
  children    Category[] @relation("SubCategories")
  products    Product[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([name, parentId])
}

model Brand {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  url         String?
  image       String?
  slug        String    @unique
  isActive    Boolean   @default(true)
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id            String   @id @default(uuid())
  name          String
  slug          String   @unique
  description   String?
  howToUse      String?
  youtubeVideo  String?
  specification String?
  basePrice     Decimal  @db.Decimal(10, 2)
  stock         Int      @default(0)
  imageUrls     String[]
  isFeatured    Boolean  @default(false)
  isActive      Boolean  @default(true)
  isDeleted     Boolean  @default(false)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  brandId String?
  brand   Brand?  @relation(fields: [brandId], references: [id], onDelete: Cascade)

  promotionId String?
  promotion   Promotion? @relation(fields: [promotionId], references: [id])

  variants ProductVariant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductVariant {
  id         String                  @id @default(uuid())
  productId  String
  product    Product                 @relation(fields: [productId], references: [id])
  sku        String                  @unique
  price      Decimal                 @db.Decimal(10, 2)
  stock      Int                     @default(0)
  attributes VariantAttributeValue[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VariantAttributeValue {
  id               String         @id @default(uuid())
  variantId        String
  variant          ProductVariant @relation(fields: [variantId], references: [id])
  attributeValueId String
  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id])

  @@unique([variantId, attributeValueId])
}

model Promotion {
  id               String        @id @default(uuid())
  name             String
  description      String?
  type             PromotionType
  value            Decimal       @db.Decimal(10, 2)
  minOrderAmount   Decimal?      @db.Decimal(10, 2)
  startDate        DateTime
  endDate          DateTime
  isActive         Boolean       @default(true)
  minQuantity      Int?
  maxQuantity      Int?
  imageUrl         String?
  minLoyaltyPoints Int?
  couponCode       String?       @unique
  products         Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  isActive    Boolean  @default(true)
  productIds  String[] @default([])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// ==============================
// 4. Order Management
// ==============================
model Order {
  id                String      @id @default(uuid())
  customerId        String
  customer          Customer    @relation(fields: [customerId], references: [id])
  subtotal          Decimal     @db.Decimal(10, 2)
  totalAmount       Decimal     @db.Decimal(10, 2)
  loyaltyPointsUsed Int         @default(0)
  loyaltyDiscount   Decimal     @default(0.0) @db.Decimal(10, 2)
  appliedCouponCode String?
  promotionDiscount Decimal?    @db.Decimal(10, 2)
  status            OrderStatus @default(PENDING)
  orderDate         DateTime    @default(now())
  shippingAddressId String
  shippingAddress   Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String
  billingAddress    Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  paymentStatus     String      @default("PENDING")
  transactionId     String?
  items             OrderItem[]
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model OrderItem {
  id               String          @id @default(uuid())
  orderId          String
  order            Order           @relation(fields: [orderId], references: [id])
  productVariantId String?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])

  productName       String
  variantSku        String?
  variantAttributes Json?

  // Snapshots of the promotion applied to this item
  promotionName           String?
  promotionType           PromotionType?
  promotionValue          Decimal?       @db.Decimal(10, 2)
  promotionDiscountAmount Decimal?       @db.Decimal(10, 2)

  quantity        Int
  priceAtPurchase Decimal  @db.Decimal(10, 2)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// ==============================
// 5. Shopping Cart
// ==============================
model Cart {
  id         String     @id @default(uuid())
  customerId String?    @unique
  customer   Customer?  @relation(fields: [customerId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  items      CartItem[]
}

model CartItem {
  id               String          @id @default(uuid())
  cartId           String
  cart             Cart            @relation(fields: [cartId], references: [id])
  productVariantId String?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
  promotionId      String?
  quantity         Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

// ==============================
// 6. Content Management & Other
// ==============================
model Banner {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String
  linkUrl   String?
  keyName   String?  @unique
  isActive  Boolean  @default(true)
  priority  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id          String    @id @default(uuid())
  title       String
  content     String
  publishedAt DateTime  @default(now())
  expiresAt   DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Blog {
  id          String     @id @default(uuid())
  title       String
  slug        String     @unique
  content     String
  authorId    String
  author      Customer   @relation(fields: [authorId], references: [id])
  status      BlogStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ExtraMeta {
  id        String   @id @default(uuid())
  keyName   String   @unique
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LoyaltySetting {
  id                      String  @id @default(uuid())
  pointsPerDollar         Decimal @db.Decimal(10, 2)
  minOrderAmountForPoints Decimal @db.Decimal(10, 2)
}
